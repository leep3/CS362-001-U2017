/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 07 08:36:17 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalDay;
import calendar.TimeTable;
import java.time.Clock;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TimeTable_ESTest extends TimeTable_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      Appt appt0 = new Appt(1, 1, 1, 1, 1, "}", "}");
      linkedList0.add(appt0);
      calDay0.addAppt(appt0);
      int[] intArray0 = new int[4];
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertTrue(linkedList0.equals((Object)linkedList1));
  }

  @Test
  public void test01()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        timeTable0.permute((LinkedList<Appt>) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt(1, 1, 1, 1, 1, "", " ");
      linkedList0.add(appt0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      Appt appt0 = new Appt(1, 1, 1, 1, 1, "}", "}");
      linkedList0.add(appt0);
      calDay0.addAppt(appt0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         assertThrownBy("calendar.TimeTable", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 8);
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar1, mockGregorianCalendar0);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      Clock clock0 = Clock.systemDefaultZone();
      mockGregorianCalendar0.set(0, (-877));
      ZonedDateTime zonedDateTime0 = ZonedDateTime.now(clock0);
      GregorianCalendar gregorianCalendar0 = GregorianCalendar.from(zonedDateTime0);
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, gregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         assertThrownBy("java.util.GregorianCalendar", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      Appt appt0 = new Appt(1, 1, 1, 1, 1, "}", "}");
      linkedList0.add(appt0);
      calDay0.addAppt(appt0);
      Appt appt1 = new Appt(1, 1, 1, 1, 1, "}", "}");
      linkedList0.offer(appt0);
      timeTable0.deleteAppt(linkedList0, appt1);
      assertEquals(3, linkedList0.size());
      assertEquals(2, calDay0.getSizeAppts());
  }

  @Test
  public void test07()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = timeTable0.deleteAppt((LinkedList<Appt>) null, (Appt) null);
      assertNull(linkedList0);
  }

  @Test
  public void test08()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      Appt appt0 = new Appt(1694, 0, 1694, 0, 1694, "2e<Yyb}t=j5Y", "2e<Yyb}t=j5Y");
      linkedList0.add(appt0);
      ZonedDateTime zonedDateTime0 = ZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = GregorianCalendar.from(zonedDateTime0);
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, gregorianCalendar0);
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1502094962808,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2017,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=219,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=36,SECOND=2,MILLISECOND=808,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1270, linkedList1.size());
  }

  @Test
  public void test09()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Second date specified is not  before the first date specified.
         //
         assertThrownBy("calendar.TimeTable", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Appt appt0 = new Appt(2, 2, 2, 2, 2, "2e<yb}t=j5Y", "2e<yb}t=j5Y");
      linkedList0.add(appt0);
      ZonedDateTime zonedDateTime0 = ZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = GregorianCalendar.from(zonedDateTime0);
      TimeTable timeTable0 = new TimeTable();
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, gregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("calendar.TimeTable", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      Appt appt0 = new Appt(1, 1, 1, 1, 1, "}", "}");
      linkedList0.add(appt0);
      calDay0.addAppt(appt0);
      linkedList0.offer(appt0);
      timeTable0.deleteAppt(linkedList0, appt0);
      assertEquals(2, linkedList0.size());
      assertEquals(1, calDay0.getSizeAppts());
  }

  @Test
  public void test12()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt((-594), (-594), 5, 5, 5, "|~:jiSpu.+<Q|YU", "|~:jiSpu.+<Q|YU");
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertNull(linkedList1);
  }

  @Test
  public void test13()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, (Appt) null);
      assertNull(linkedList1);
  }

  @Test
  public void test14()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      Appt appt0 = new Appt(1, 1, 1, 1, 1, "}", "}");
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertNull(linkedList1);
  }
}
