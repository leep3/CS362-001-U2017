/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 07 08:37:58 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalendarUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", (String) null);
      appt0.setTitle((String) null);
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(3, 30, 30, 3, 1258, "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)", "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)");
      appt0.setTitle("javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)");
      assertEquals(30, appt0.getStartDay());
      assertEquals(3, appt0.getStartHour());
      assertEquals("javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)", appt0.getDescription());
      assertEquals(30, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1258, appt0.getStartYear());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(3, appt0.getStartMonth());
  }

  @Test
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(2987, 2987, 2987, 0, 0, "/>h,w", "am");
      appt0.setDescription("/>h,w");
      assertEquals("/>h,w", appt0.getDescription());
  }

  @Test
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt(2, 28, 28, 2, 1258, "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)", "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)");
      boolean boolean0 = appt0.getValid();
      assertEquals(28, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(boolean0);
      assertEquals(1258, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(28, appt0.getStartMinute());
      assertEquals(2, appt0.getStartHour());
  }

  @Test
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt((-1075), (-1075), (-1075), 0, 1000, "", "");
      boolean boolean0 = appt0.getValid();
      assertEquals(-1075, appt0.getStartDay());
      assertEquals(-1075, appt0.getStartMinute());
      assertEquals(1000, appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(-1075, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt(3, 30, 30, 3, 1258, "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)", "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)");
      String string0 = appt0.getTitle();
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1258, appt0.getStartYear());
      assertEquals(30, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(3, appt0.getStartHour());
      assertEquals(30, appt0.getStartMinute());
      assertEquals("javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(0, 1000, 0, 0, 0, "", "");
      int int0 = appt0.getStartYear();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1000, appt0.getStartMinute());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 1470, "pm", "pm");
      int int0 = appt0.getStartYear();
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(1470, int0);
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
  }

  @Test
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt((-85), (-85), (-85), 0, (-85), "", "");
      int int0 = appt0.getStartYear();
      assertEquals(-85, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-85, appt0.getStartMinute());
      assertEquals((-85), int0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(-85, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt(3, (-3276), (-3276), 3, 3, "0i,)SJ}", "0i,)SJ}");
      int int0 = appt0.getStartMonth();
      assertEquals("0i,)SJ}", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, int0);
      assertEquals(3, appt0.getStartYear());
      assertEquals(3, appt0.getStartHour());
      assertEquals(-3276, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(-3276, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", (String) null);
      int int0 = appt0.getStartMinute();
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartDay());
  }

  @Test
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt(0, 445, 445, 0, 0, "", "");
      int int0 = appt0.getStartMinute();
      assertEquals(445, int0);
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(445, appt0.getStartDay());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt((-2654), (-2654), 0, 0, 0, "5B!", "5B!");
      int int0 = appt0.getStartMinute();
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertEquals(-2654, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2654), int0);
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("5B!", appt0.getDescription());
      assertFalse(appt0.isRecurring());
  }

  @Test
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-1005), "9%", "");
      int int0 = appt0.getStartHour();
      assertEquals(0, appt0.getStartMinute());
      assertEquals(-1005, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, int0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertEquals("9%", appt0.getTitle());
  }

  @Test
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt((-1075), (-1075), (-1075), 0, 1000, "", "");
      int int0 = appt0.getStartHour();
      assertEquals(1000, appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-1075), int0);
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(-1075, appt0.getStartMinute());
      assertEquals(-1075, appt0.getStartDay());
  }

  @Test
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 1470, "pm", "pm");
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(1470, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, int0);
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(2987, 2987, 2987, 0, 0, "/>h,w", "am");
      int int0 = appt0.getStartDay();
      assertFalse(appt0.getValid());
      assertEquals(2987, int0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2987, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals("am", appt0.getDescription());
      assertEquals(2987, appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("/>h,w", appt0.getTitle());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(3, 30, 30, 3, 1258, "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)", "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)");
      int int0 = appt0.getRecurNumber();
      assertEquals(0, int0);
      assertEquals(1258, appt0.getStartYear());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(30, appt0.getStartDay());
      assertEquals(3, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(30, appt0.getStartMinute());
  }

  @Test
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, (-2700), 0, 0, "", "");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, (-15), 0, 8);
      int int0 = appt0.getRecurNumber();
      assertEquals(8, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", (String) null);
      int[] intArray0 = new int[10];
      appt0.setRecurrence(intArray0, 0, (-1986), (-1));
      int int0 = appt0.getRecurNumber();
      assertEquals(-1986, appt0.getRecurIncrement());
      assertEquals((-1), int0);
  }

  @Test
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt(2987, 2987, 2987, 0, 0, "/>h,w", "am");
      int[] intArray0 = appt0.getRecurDays();
      appt0.setRecurrence(intArray0, 0, 2987, 31);
      int int0 = appt0.getRecurIncrement();
      assertEquals(31, appt0.getRecurNumber());
      assertEquals(2987, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "SD[R&", "SD[R&");
      String string0 = appt0.toString();
      assertEquals("\t11/11/11 at 11:11am ,SD[R&, SD[R&\n", string0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, (-2700), 0, 0, "", "");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 0, (-2700), 0);
      int int0 = appt0.getRecurIncrement();
      assertEquals((-2700), int0);
  }

  @Test
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", (String) null);
      int[] intArray0 = new int[10];
      appt0.setRecurrence(intArray0, 0, 1, (-1));
      boolean boolean0 = appt0.isRecurring();
      assertEquals(1, appt0.getRecurIncrement());
      assertTrue(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt((-85), (-85), (-85), 0, (-85), "", "");
      int[] intArray0 = appt0.getRecurDays();
      appt0.setRecurrence(intArray0, (-119), 1703, 0);
      int int0 = appt0.getRecurBy();
      assertEquals(1703, appt0.getRecurIncrement());
      assertEquals((-119), int0);
  }

  @Test
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 1470, "pm", "pm");
      int int0 = appt0.getStartMonth();
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartHour());
      assertEquals("pm", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals(1470, appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      Appt appt0 = new Appt(60, 60, 60, 0, 60, "TTSs\"d)l9()", "TTSs\"d)l9()");
      assertEquals(60, appt0.getStartHour());
      
      appt0.setStartHour(int0);
      assertEquals(60, appt0.getStartDay());
  }

  @Test
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(24, 1, 0, 1, (-1575), (String) null, (String) null);
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(24, appt0.getStartHour());
      assertEquals(-1575, appt0.getStartYear());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt(0, (-2089), 0, 0, 523, "", "A");
      int int0 = appt0.getRecurIncrement();
      int[] intArray0 = appt0.getRecurDays();
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartYear(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt(60, 60, 60, 0, 60, "TTSs\"d)l9()", "TTSs\"d)l9()");
      int int0 = appt0.getStartHour();
      // Undeclared exception!
      try { 
        appt0.setStartMonth(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt(10, 10, 11, 10, 10, "/", "/");
      int[] intArray0 = appt0.getRecurDays();
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(388);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Appt appt0 = new Appt(3, (-3276), (-3276), 3, 3, "0i,)SJ}", "0i,)SJ}");
      int[] intArray0 = new int[9];
      CalendarUtil.DaysInMonth = intArray0;
      int[] intArray1 = appt0.getRecurDays();
      CalendarUtil.DaysInMonth = intArray1;
      // Undeclared exception!
      try { 
        appt0.setStartHour((-3276));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Appt appt0 = new Appt((-85), (-85), (-85), 0, (-85), ":", ":");
      int int0 = appt0.getStartDay();
      int[] intArray0 = appt0.getRecurDays();
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartDay(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test
  public void test33()  throws Throwable  {
      CalendarUtil.DaysInMonth = null;
      Appt appt0 = null;
      try {
        appt0 = new Appt((-1192), (-1685), (-1), 10, 2184, "InvalidXGCRepresentation", "InvalidXGCRepresentation");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Appt appt0 = null;
      try {
        appt0 = new Appt((-1589), 2987, 1766, 581, 28, "am", (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 581
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test
  public void test35()  throws Throwable  {
      Appt appt0 = new Appt(2987, 2987, 2987, 0, 0, "/>h,w", "am");
      int[] intArray0 = appt0.getRecurDays();
      appt0.setRecurrence(intArray0, 0, 2987, 31);
      boolean boolean0 = appt0.isRecurring();
      assertEquals(31, appt0.getRecurNumber());
      assertTrue(boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 995, 0, 12, "calendar.CalendarUtil", "calendar.CalendarUtil");
      assertEquals("calendar.CalendarUtil", appt0.getDescription());
      
      appt0.setDescription((String) null);
      assertEquals(2, appt0.getRecurBy());
  }

  @Test
  public void test37()  throws Throwable  {
      Appt appt0 = new Appt(0, 1000, 0, 0, 0, "", "");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 0, 1274, 0);
      int int0 = appt0.getRecurBy();
      assertEquals(1274, appt0.getRecurIncrement());
      assertEquals(0, int0);
  }

  @Test
  public void test38()  throws Throwable  {
      Appt appt0 = new Appt(3, (-3276), (-3276), 3, 3, "0i,)SJ}", "0i,)SJ}");
      appt0.toString();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-3276, appt0.getStartDay());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(3, appt0.getStartHour());
      assertEquals(3, appt0.getStartYear());
      assertEquals(-3276, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test
  public void test39()  throws Throwable  {
      Appt appt0 = new Appt(3, 30, 30, 3, 1258, "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)", "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)");
      appt0.setStartYear(30);
      assertEquals(30, appt0.getStartYear());
  }

  @Test
  public void test40()  throws Throwable  {
      Appt appt0 = new Appt((-85), (-85), (-85), 0, (-85), "", "");
      appt0.setStartMonth(3);
      assertEquals(3, appt0.getStartMonth());
  }

  @Test
  public void test41()  throws Throwable  {
      Appt appt0 = new Appt(3401, 10, 3401, 10, 10, "S", "S");
      appt0.setRecurrence((int[]) null, 3401, 10, 10);
      assertEquals(10, appt0.getRecurIncrement());
  }

  @Test
  public void test42()  throws Throwable  {
      Appt appt0 = new Appt(3, 30, 30, 3, 1258, "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)", "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)");
      appt0.setStartHour(0);
      appt0.toString();
      assertEquals(0, appt0.getStartHour());
  }

  @Test
  public void test43()  throws Throwable  {
      Appt appt0 = new Appt(13, 13, 13, 0, 13, (String) null, (String) null);
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(13, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      assertEquals(13, appt0.getStartMinute());
      assertEquals(13, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(13, appt0.getStartDay());
  }

  @Test
  public void test44()  throws Throwable  {
      Appt appt0 = new Appt(3, (-3276), (-3276), 3, 3, "0i,)SJ}", "0i,)SJ}");
      appt0.setStartMinute(0);
      assertEquals(0, appt0.getStartMinute());
  }

  @Test
  public void test45()  throws Throwable  {
      Appt appt0 = new Appt((-85), (-85), (-85), 0, (-85), "", "");
      appt0.setStartDay((-119));
      assertEquals(-119, appt0.getStartDay());
  }

  @Test
  public void test46()  throws Throwable  {
      Appt appt0 = new Appt(3, (-3276), (-3276), 3, 3, "0i,)SJ}", "0i,)SJ}");
      boolean boolean0 = appt0.isRecurring();
      assertEquals(3, appt0.getStartYear());
      assertEquals(3, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-3276, appt0.getStartMinute());
      assertEquals(-3276, appt0.getStartDay());
      assertFalse(boolean0);
      assertEquals("0i,)SJ}", appt0.getDescription());
      assertEquals("0i,)SJ}", appt0.getTitle());
  }

  @Test
  public void test47()  throws Throwable  {
      Appt appt0 = new Appt(3, (-3276), (-3276), 3, 3, "0i,)SJ}", "0i,)SJ}");
      int int0 = appt0.getRecurBy();
      assertEquals(3, appt0.getStartHour());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(2, int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-3276, appt0.getStartMinute());
      assertEquals(3, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      assertEquals(-3276, appt0.getStartDay());
  }

  @Test
  public void test48()  throws Throwable  {
      Appt appt0 = new Appt(3, (-3276), (-3276), 3, 3, "0i,)SJ}", "0i,)SJ}");
      String string0 = appt0.getDescription();
      assertEquals(-3276, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("0i,)SJ}", string0);
      assertEquals(3, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(3, appt0.getStartYear());
      assertEquals(-3276, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(3, appt0.getStartMonth());
  }
}
